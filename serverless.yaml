service: corduroy-v1

package:
  individually: true
  exclude:
    - venv/**
    - chromedriver-win64/**
    - tests/**
    - "*.zip"
    - "*.ipynb"
    - "*.yaml"
    - "*.sh"

provider:
  name: aws
  runtime: python3.12
  iam:
    role:
      managedPolicies:
        - !Ref LambdaExecutionRole
  ecr:
    images:
      copperImage: #TODO: make the digest a param
        uri: 717279707480.dkr.ecr.us-east-1.amazonaws.com/docker-images@sha256:bef66b6a9b10b230ecf56b36481503ec6c6ffc7d44173fa4b3205604d02be105 #TODO, acct id and "latest"
functions:
  rdsLambda:
    name: rds-lambda-v1
    package:
      artifact: s3://cwpace97-lambda-deployments/rds-lambda/rds_lambda.zip
    handler: rds_lambda.lambda_handler
    memorySize: 512
    timeout: 300
    environment:
      RDS_CONNECTION_SECRET: lambda-service-account
      SKI_DATABASE: cwpdb
      RUNS_TABLE: runs_stg
      LIFTS_TABLE: lifts_stg
    events:
    - sqs:
        arn: !GetAtt rdsLambdaSQSQueue.Arn
        batchSize: 1
        enabled: true
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - subnet-011cba717e86b2164 #TODO
        - subnet-079244f582887fb0d #TODO
    # role: !Get AttAWSLambdaVPCAccessExecutionRole

  copperScraper:
    name: copper-data-v1
    image:
      name: copperImage
    memorySize: 512
    timeout: 300
    environment:
      RDS_LAMBDA_TOPIC: !Ref rdsLambdaSNSTopic
    events:
      - schedule:
        name: "copper-daily-schedule"
        rate: cron(0 13 * 10-12,1-5 *)

resources:
  Resources:
    LambdaExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: "lambda-execution-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action: 
                - secretsmanager:GetResourcePolicy
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
                - secretsmanager:ListSecretVersionIds
              Resource:
                - !Ref LambdaServiceSecret
            - Effect: Allow
              Action:
                - secretsmanager:ListSecrets
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - ecr:* #TODO: refine
              Resource: arn:aws:ecr:us-east-1:717279707480:repository/docker-images
    LambdaServiceSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: "lambda-service-account"
        GenerateSecretString:
          SecretStringTemplate: '{"host": "cwp-db-instance.cnag64oy6f2k.us-east-1.rds.amazonaws.com", "username": "lambda-service-account", "dbname": "cwpdb", "port": "3306"}'
          GenerateStringKey: password
          PasswordLength: 15
          ExcludeCharacters: "\"'/@\\"
    SNStoSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
        - Ref: rdsLambdaSQSQueue
        PolicyDocument:
          Statement:
            - Sid: "Allow All SNS to Publish to All SQS"
              Effect: Allow
              Principal:
                Service: "sns.amazonaws.com"
              Resource: "arn:aws:sqs:us-east-1:717279707480:sqs-*"
              Action: sqs:sendMessage
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    - "arn:aws:sns:us-east-1:717279707480:sns-*"
    PublishToSNSPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
          - Sid: "Allow Publish to SNS"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: 
            - sns:Publish
            - sns:Subscribe
            Resource: "*"
        Topics:
          - Ref: rdsLambdaSNSTopic
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda function
        VpcId: vpc-0e18b1105fb31aa67 #TODO
    
    rdsLambdaSQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "sqs-rds-data-queue"
        VisibilityTimeout: 360
    rdsLambdaSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "sns-rds-data-topic"
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt rdsLambdaSQSQueue.Arn
        DeliveryStatusLogging:
          - Protocol: sqs
            SuccessFeedbackSampleRate: 30
            SuccessFeedbackRoleArn: arn:aws:iam::717279707480:role/SNSSuccessFeedback #TODO: add this role to CF
            FailureFeedbackRoleArn: arn:aws:iam::717279707480:role/SNSFailureFeedback #TODO: add this role to CF
 