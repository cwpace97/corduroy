service: corduroy-v1

package:
  individually: true
  exclude:
    - venv/**
    - chromedriver-win64/**
    - tests/**
    - "*.zip"
    - "*.ipynb"
    - "*.yaml"
    - "*.sh"

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  iam:
    role:
      managedPolicies:
        - !Ref LambdaExecutionRole
  ecr:
    images:
      scraperImage:
        uri: 717279707480.dkr.ecr.us-east-1.amazonaws.com/docker-images:latest
functions:
  dynamoLambda:
    name: dynamo-lambda-v1
    package:
      artifact: s3://cwpace97-lambda-deployments/dynamo-lambda/dynamo_lambda.zip
    handler: dynamo_lambda.lambda_handler
    memorySize: 512
    timeout: 300
    environment:
      RUNS_TABLE: !Ref SkiRunsDynamoTable
      LIFTS_TABLE: !Ref SkiLiftsDynamoTable
    events:
    - sqs:
        arn: !GetAtt dynamoLambdaSQSQueue.Arn
        batchSize: 1
        enabled: true

  # SCRAPER LAMBDAS
  copperScraper:
    name: copper-data-v1
    image:
      name: scraperImage
      command: ["scraper_copper.handler"] #TODO
    memorySize: 512
    timeout: 300
    environment:
      RDS_LAMBDA_TOPIC: !Ref dynamoLambdaSNSTopic
      WEBSITE_URL: https://www.coppercolorado.com/the-mountain/trail-lift-info/winter-trail-report
    events:
      - schedule:
          name: "copper-daily-schedule"
          rate: cron(0 13 * 10-12,1-5 ? *)
  lovelandScraper:
    name: loveland-data-v1
    image:
      name: scraperImage
      command: ["scraper_loveland.handler"]
    memorySize: 512
    timeout: 300
    environment:
      RDS_LAMBDA_TOPIC: !Ref dynamoLambdaSNSTopic
      WEBSITE_URL: https://skiloveland.com/trail-lift-report/
    events:
      - schedule:
          name: "loveland-daily-schedule"
          rate: cron(0 13 * 10-12,1-5 ? *)
  winterparkScraper:
    name: winterpark-data-v1
    image:
      name: scraperImage
      command: ["scraper_winterpark.handler"]
    memorySize: 512
    timeout: 300
    environment:
      RDS_LAMBDA_TOPIC: !Ref dynamoLambdaSNSTopic
      WEBSITE_URL: https://www.winterparkresort.com/the-mountain/mountain-report#lift-and-trail-status
    events:
      - schedule:
          name: "winterpark-daily-schedule"
          rate: cron(0 13 * 10-12,1-5 ? *)

resources:
  Resources:
    #DYNAMO TABLES FOR STORING INFORMATION
    SkiRunsDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "ski-runs-fact-table-dynamo-v0"
        AttributeDefinitions:
          - AttributeName: date-location-run
            AttributeType: S
          - AttributeName: location
            AttributeType: S
          - AttributeName: runName
            AttributeType: S
          - AttributeName: runDifficulty
            AttributeType: S
          - AttributeName: runStatus
            AttributeType: S
          - AttributeName: updatedDate
            AttributeType: S
        KeySchema:
          - AttributeName: date-location-run
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: "location-gsi"
            KeySchema:
              - AttributeName: location
                KeyType: HASH
              - AttributeName: updatedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "run-name-gsi"
            KeySchema:
              - AttributeName: runName
                KeyType: HASH
              - AttributeName: updatedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "run-difficulty-gsi"
            KeySchema:
              - AttributeName: runDifficulty
                KeyType: HASH
              - AttributeName: updatedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "run-status-gsi"
            KeySchema:
              - AttributeName: runStatus
                KeyType: HASH
              - AttributeName: updatedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    SkiLiftsDynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "ski-lifts-fact-table-dynamo-v0"
        AttributeDefinitions:
          - AttributeName: date-location-lift
            AttributeType: S
          - AttributeName: location
            AttributeType: S
          - AttributeName: liftName
            AttributeType: S
          - AttributeName: liftStatus
            AttributeType: S
          - AttributeName: updatedDate
            AttributeType: S
        KeySchema:
          - AttributeName: date-location-lift
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        GlobalSecondaryIndexes:
          - IndexName: "location-gsi"
            KeySchema:
              - AttributeName: location
                KeyType: HASH
              - AttributeName: updatedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "lift-name-gsi"
            KeySchema:
              - AttributeName: liftName
                KeyType: HASH
              - AttributeName: updatedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: "lift-status-gsi"
            KeySchema:
              - AttributeName: liftStatus
                KeyType: HASH
              - AttributeName: updatedDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
    
    LambdaExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: "lambda-execution-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - ecr:* #TODO: refine
              Resource: arn:aws:ecr:us-east-1:717279707480:repository/docker-images
            - Effect: Allow
              Action:
                - dynamodb:* #TODO: refine
              Resource: 
              - !GetAtt SkiRunsDynamoTable.Arn
              - !GetAtt SkiLiftsDynamoTable.Arn
            # - Effect: Allow
            #   Action: 
            #     - secretsmanager:GetResourcePolicy
            #     - secretsmanager:GetSecretValue
            #     - secretsmanager:DescribeSecret
            #     - secretsmanager:ListSecretVersionIds
            #   Resource:
            #     - !Ref LambdaServiceSecret
            # - Effect: Allow
            #   Action:
            #     - secretsmanager:ListSecrets
            #   Resource:
            #     - "*"
            

    SNStoSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
        - Ref: dynamoLambdaSQSQueue
        PolicyDocument:
          Statement:
            - Sid: "Allow All SNS to Publish to All SQS"
              Effect: Allow
              Principal:
                Service: "sns.amazonaws.com"
              Resource: "arn:aws:sqs:us-east-1:717279707480:sqs-*"
              Action: sqs:sendMessage
              Condition:
                ArnEquals:
                  aws:SourceArn:
                    - "arn:aws:sns:us-east-1:717279707480:sns-*"
    PublishToSNSPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Statement:
          - Sid: "Allow Publish to SNS"
            Effect: Allow
            Principal:
              AWS: "*"
            Action: 
            - sns:Publish
            - sns:Subscribe
            Resource: "*"
        Topics:
          - Ref: dynamoLambdaSNSTopic
    
    dynamoLambdaSQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "sqs-dynamo-data-queue"
        VisibilityTimeout: 360
    dynamoLambdaSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: "sns-dynamo-data-topic"
        Subscription:
          - Protocol: sqs
            Endpoint: !GetAtt dynamoLambdaSQSQueue.Arn
        DeliveryStatusLogging:
          - Protocol: sqs
            SuccessFeedbackSampleRate: 30
            SuccessFeedbackRoleArn: arn:aws:iam::717279707480:role/SNSSuccessFeedback #TODO: add this role to CF
            FailureFeedbackRoleArn: arn:aws:iam::717279707480:role/SNSFailureFeedback #TODO: add this role to CF
 